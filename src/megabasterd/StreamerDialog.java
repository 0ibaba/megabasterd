package megabasterd;

import java.awt.Font;
import java.awt.event.WindowEvent;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import static megabasterd.MainPanel.FONT_DEFAULT;

/**
 *
 * @author tonikelope
 */
public final class StreamerDialog extends javax.swing.JDialog implements ClipboardChangeObserver {

    private final ClipboardSpy _clipboardspy;
    
    /**
     * Creates new form Streamer
     */
    public StreamerDialog(java.awt.Frame parent, boolean modal, ClipboardSpy clipboardspy) {
        super(parent, modal);
        initComponents();

        _clipboardspy = clipboardspy;
        
        MiscTools.updateFont(put_label, FONT_DEFAULT, Font.PLAIN);
        MiscTools.updateFont(dance_button, FONT_DEFAULT, Font.PLAIN);
        
        MiscTools.swingReflectionInvoke("setText", original_link_textfield, MiscTools.extractFirstMegaLinkFromString(MiscTools.extractStringFromClipboardContents(clipboardspy.getContents())));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        put_label = new javax.swing.JLabel();
        dance_button = new javax.swing.JButton();
        original_link_textfield = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Streamer");
        setResizable(false);

        put_label.setFont(new java.awt.Font("Dialog", 1, 20)); // NOI18N
        put_label.setText("Put your mega/megacrypter link here in order to get a streaming link:");
        put_label.setDoubleBuffered(true);

        dance_button.setBackground(new java.awt.Color(102, 204, 255));
        dance_button.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        dance_button.setForeground(new java.awt.Color(255, 255, 255));
        dance_button.setText("Let's dance, baby");
        dance_button.setDoubleBuffered(true);
        dance_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dance_buttonActionPerformed(evt);
            }
        });

        original_link_textfield.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        original_link_textfield.setDoubleBuffered(true);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(dance_button, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(put_label)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(original_link_textfield))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(put_label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(original_link_textfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(dance_button, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        original_link_textfield.addMouseListener(new ContextMenuMouseListener());

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void dance_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dance_buttonActionPerformed
        
        
        String link=((String)MiscTools.swingReflectionInvokeAndWaitForReturn("getText", original_link_textfield)).trim();

        if(link.length() == 0) {
            
            JOptionPane.showMessageDialog(this, "Please, paste a mega/megacrypter link!");
            
            MiscTools.swingReflectionInvoke("setText", original_link_textfield, "");
            
        } else {
            
            try {
           
                link = CryptTools.decryptMegaDownloaderLink(link);
        
            } catch (Exception ex) {
                Logger.getLogger(StreamerDialog.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            String data;
            
            link=link.replace("/#!N?", "/#N!");
        
            if( MiscTools.findFirstRegex("://mega(\\.co)?\\.nz/#[^fF]", link, 0) != null)
            {
                data=MiscTools.findFirstRegex("/#(N?!.+)", link, 1);
                
                _cookLink("http://localhost:1337/video/mega/"+data);
                
            } else if( (data=MiscTools.findFirstRegex("https?://([^/]+/![^!]+![0-9a-fA-F]+)", link, 1)) != null) {

                _cookLink("http://localhost:1337/video/"+data);
                
            } else {
                
                JOptionPane.showMessageDialog(this, "Please, paste a mega/megacrypter link!");
                
                MiscTools.swingReflectionInvoke("setText", original_link_textfield, "");
            } 
        }
    }//GEN-LAST:event_dance_buttonActionPerformed

    private void _cookLink(final String streamlink)
    {
        MiscTools.swingReflectionInvoke("setEnabled", dance_button, false);
        MiscTools.swingReflectionInvoke("setEnabled", original_link_textfield, false);
        
        final StreamerDialog streamer_run = this;
        
        MainPanel.THREAD_POOL.execute(new Runnable(){
            @Override
            public void run() {
                
                 try {
                    MiscTools.copyTextToClipboard(MiscTools.deflateURL(streamlink));
                } catch (IOException ex) {
                    Logger.getLogger(StreamerDialog.class.getName()).log(Level.SEVERE, null, ex);
                }

            JOptionPane.showMessageDialog(streamer_run, "Streaming link was copied to clipboard!\n(Remember to keep MegaBasterd running in background while playing)");

            streamer_run.dispose();

            streamer_run.getParent().dispatchEvent(new WindowEvent(streamer_run, WindowEvent.WINDOW_CLOSING));
               
            }
        });
    }
            
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton dance_button;
    private javax.swing.JTextField original_link_textfield;
    private javax.swing.JLabel put_label;
    // End of variables declaration//GEN-END:variables

    @Override
    public void notifyClipboardChange() {
        
        MiscTools.swingReflectionInvoke("setText", original_link_textfield, MiscTools.extractFirstMegaLinkFromString(MiscTools.extractStringFromClipboardContents(_clipboardspy.getContents())));    }
    }
